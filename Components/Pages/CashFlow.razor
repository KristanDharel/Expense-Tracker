@* 
 @page "/cashflow"
@using ADCourseWork.Models
@using ADCourseWork.Services
@inject ICashflows cashFlowService
@inject IDebtService debtServices
@inject NavigationManager navigationManager
@inject AuthentucationStateService authStateService

@if (!authStateService.IsAuthenticated)
{
    navigationManager.NavigateTo("/login", true);
    <p>Redirecting...</p>
}
else
{
    <h3 class="text-center mt-4">Cash Flow</h3>
    <div class="container mt-5">
      

        <div class="card shadow p-4">
            <form>
                <div class="row mb-3">
                    <div class="col">
                        <label for="transactionName" class="form-label">Transaction Name</label>
                        <input type="text"
                               @bind="newCashFlow.TransactionName"
                               class="form-control @(titleError ? "is-invalid" : "")"
                               id="transactionName"
                               placeholder="Enter transaction name">
                        @if (titleError)
                        {
                            <div class="invalid-feedback">
                                Transaction name is required.
                            </div>
                        }
                    </div>

                    <div class="col">
                        <label for="transactionType" class="form-label">Transaction Type</label>
                        <select @bind="newCashFlow.TransactionType"
                                class="form-select @(typeError ? "is-invalid" : "")"
                                id="transactionType">
                            <option value="" disabled selected>Select transaction type</option>
                            <option value="income">Income</option>
                            <option value="expense">Expense</option>
                        </select>
                        @if (typeError)
                        {
                            <div class="invalid-feedback">
                                Transaction type is required.
                            </div>
                        }
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label for="startDate" class="form-label">Date</label>
                        <input type="date"
                               id="startDate"
                               class="form-control"
                               @bind="newCashFlow.FlowDate">
                    </div>
                    <div class="col">
                        <label for="amount" class="form-label">Amount</label>
                        <input type="number"
                               @bind="tempAmount"
                               @bind:event="oninput"
                               class="form-control @(amountError ? "is-invalid" : "")"
                               id="amount"
                               placeholder="Enter amount">
                        @if (amountError)
                        {
                            <div class="invalid-feedback">
                                @errorMessage
                            </div>
                        }
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label for="transactionTag" class="form-label">Transaction Tag</label>
                        <select @bind="newCashFlow.TransactionTag"
                                class="form-select @(tagError ? "is-invalid" : "")"
                                id="transactionTag">
                            <option value="" disabled selected>Select Transaction Tag</option>
                            <option value="food">Food</option>
                            <option value="transport">Transport</option>
                            <option value="shopping">Shopping</option>
                            <option value="bills">Bills</option>
                            <option value="entertainment">Entertainment</option>
                            <option value="other">Other</option>
                        </select>
                        @if (tagError)
                        {
                            <div class="invalid-feedback">
                                Transaction tag is required.
                            </div>
                        }
                    </div>
                    <div class="col">
                        <label for="customTag" class="form-label">Custom Tag (optional)</label>
                        <input @bind="newCashFlow.CustomTag"
                               type="text"
                               class="form-control"
                               id="customTag"
                               placeholder="Enter custom tag">
                    </div>
                </div>

                <div class="mb-3">
                    <label for="note" class="form-label">Note (optional)</label>
                    <textarea @bind="newCashFlow.Note"
                              class="form-control"
                              id="note"
                              rows="3"
                              placeholder="Enter note"></textarea>
                </div>

                <div class="d-grid gap-2">
                    <button @onclick="ValidateAndSubmit"
                            type="button"
                            class="btn btn-primary">
                        Submit Transaction
                    </button>
                </div>
            </form>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage) && !amountError && !titleError && !typeError && !tagError)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Error</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>@errorMessage</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @code {
    private ADCourseWork.Models.CashFlow newCashFlow = new();
    private string errorMessage;
    private decimal tempAmount;

    // Validation flags
    private bool amountError;
    private bool titleError;
    private bool typeError;
    private bool tagError;

    // Financial tracking
    private List<Debt> debtsPending = new();
    private int totalDebts;
    private int totalPendingDebts;
    private int clearedDebts;
    private int totalInflow;
    private int totalExpense;
    private int totalTransactions;
    private int currentBalance;

    protected override async Task OnInitializedAsync()
    {
        // Initialize with today's date
        newCashFlow.FlowDate = DateTime.Today;

        // Set the current user
        // newCashFlow.UserId = authStateService.UserId;

        await LoadFinancialData();
    }

    private async Task LoadFinancialData()
    {
        try
        {
            // Load and calculate debts
            totalDebts = await debtServices.GetTotalDebtsAsync();
            var pendingDebts = await debtServices.LoadCashDebtAsync();
            debtsPending = pendingDebts
                .Where(d => string.Equals(d.DebtStatus?.Trim(), "Pending", StringComparison.OrdinalIgnoreCase))
                .ToList();
            totalPendingDebts = debtsPending.Sum(d => d.Amount);
            clearedDebts = totalDebts - totalPendingDebts;

            // Load and calculate cash flows
            var allCashFlows = await cashFlowService.LoadCashFlowAsync();
            totalInflow = allCashFlows.Where(cf => cf.TransactionType == "income").Sum(cf => cf.Amount);
            totalExpense = allCashFlows.Where(cf => cf.TransactionType == "expense").Sum(cf => cf.Amount);

            // Calculate totals
            totalTransactions = totalInflow + totalDebts - totalExpense;
            currentBalance = ((totalInflow - totalExpense) + totalPendingDebts) - clearedDebts;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading financial data. Please try refreshing the page.";
            Console.WriteLine($"Error loading financial data: {ex.Message}");
        }
    }

    private void ResetValidation()
    {
        errorMessage = null;
        amountError = false;
        titleError = false;
        typeError = false;
        tagError = false;
    }

    private bool ValidateAmount()
    {
        if (tempAmount <= 0)
        {
            errorMessage = "Amount must be greater than zero.";
            amountError = true;
            return false;
        }

        if (newCashFlow.TransactionType == "expense" && tempAmount > currentBalance)
        {
            errorMessage = $"Expense amount exceeds current balance of {currentBalance:C}";
            amountError = true;
            return false;
        }

        newCashFlow.Amount = (int)tempAmount;
        return true;
    }

    private async Task ValidateAndSubmit()
    {
        ResetValidation();

        // Validate required fields
        titleError = string.IsNullOrWhiteSpace(newCashFlow.TransactionName);
        typeError = string.IsNullOrWhiteSpace(newCashFlow.TransactionType);
        tagError = string.IsNullOrWhiteSpace(newCashFlow.TransactionTag);

        // Check if any validation failed
        if (titleError || typeError || tagError || !ValidateAmount())
        {
            return;
        }

        await AddNewCashFlow();
    }

    private async Task AddNewCashFlow()
    {
        try
        {
            await cashFlowService.SaveCashFlowAsync(newCashFlow);

            // Reset form
            newCashFlow = new ADCourseWork.Models.CashFlow
                {
                    FlowDate = DateTime.Today,
                    // UserId = authStateService.UserId
                };
            tempAmount = 0;

            // Redirect to dashboard
            navigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to save transaction. Please try again.";
            Console.WriteLine($"Error saving cash flow: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        errorMessage = null;
    }
    }
}

 *@
 @page "/cashflow"
@using ADCourseWork.Models
@using ADCourseWork.Services
@inject ICashflows cashFlowService
@inject IDebtService debtServices
@inject NavigationManager navigationManager
@inject AuthentucationStateService authStateService

@if (!authStateService.IsAuthenticated)
{
    navigationManager.NavigateTo("/login", true);
    <p>Redirecting...</p>
}
else
{
    <h3 class="text-center mt-4">Cash Flow</h3>
    <div class="container mt-5">
        <div class="card shadow p-4">
            <form>
                <div class="row mb-3">
                    <div class="col">
                        <label for="transactionName" class="form-label">Transaction Name</label>
                        <input type="text" @bind="newCashFlow.TransactionName" class="form-control" id="transactionName" placeholder="Enter transaction name">
                    </div>

                    <div class="col">
                        <label for="transactionType" class="form-label">Transaction Type</label>
                        <select @bind="newCashFlow.TransactionType" class="form-select" id="transactionType">
                            <option value="" disabled selected>Select transaction type</option>
                            <option value="income">Income</option>
                            <option value="expense">Expense</option>
                        </select>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label for="startDate" class="form-label">Date</label>
                        <input type="date" id="startDate" class="form-control" @bind="newCashFlow.FlowDate">
                    </div>
                    <div class="col">
                        <label for="amount" class="form-label">Amount</label>
                        <input type="number" @bind="tempAmount" @bind:event="oninput" class="form-control" id="amount" placeholder="Enter amount">
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label for="transactionTag" class="form-label">Transaction Tag</label>
                        <select @bind="newCashFlow.TransactionTag" class="form-select" id="transactionTag">
                            <option value="" disabled selected>Select Transaction Tag</option>
                            <option value="food">Food</option>
                            <option value="transport">Transport</option>
                            <option value="shopping">Shopping</option>
                            <option value="bills">Bills</option>
                            <option value="entertainment">Entertainment</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="col">
                        <label for="customTag" class="form-label">Custom Tag (optional)</label>
                        <input @bind="newCashFlow.CustomTag" type="text" class="form-control" id="customTag" placeholder="Enter custom tag">
                    </div>
                </div>

                <div class="mb-3">
                    <label for="note" class="form-label">Note (optional)</label>
                    <textarea @bind="newCashFlow.Note" class="form-control" id="note" rows="3" placeholder="Enter note"></textarea>
                </div>

                <div class="d-grid gap-2">
                    <button @onclick="ValidateAndSubmit" type="button" class="btn btn-primary">Submit Transaction</button>
                </div>
            </form>
        </div>
    </div>

    @if (showErrorPopup)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-danger">Validation Error</h5>
                        <button type="button" class="btn-close" @onclick="ClosePopup" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>@errorMessage</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private ADCourseWork.Models.CashFlow newCashFlow = new()
        {
            FlowDate = DateTime.Today
        };
    private string errorMessage;
    private decimal tempAmount;
    private bool showErrorPopup;

    private async Task ValidateAndSubmit()
    {
        ResetValidation();

        if (string.IsNullOrWhiteSpace(newCashFlow.TransactionName))
        {
            errorMessage = "Transaction name is required.";
            ShowPopup();
            return;
        }

        if (string.IsNullOrWhiteSpace(newCashFlow.TransactionType))
        {
            errorMessage = "Transaction type is required.";
            ShowPopup();
            return;
        }

        if (tempAmount <= 0)
        {
            errorMessage = "Amount must be greater than zero.";
            ShowPopup();
            return;
        }

        if (newCashFlow.TransactionType == "expense" && tempAmount > currentBalance)
        {
            errorMessage = $"Expense amount exceeds current balance of {currentBalance:C}";
            ShowPopup();
            return;
        }

        if (string.IsNullOrWhiteSpace(newCashFlow.TransactionTag))
        {
            errorMessage = "Transaction tag is required.";
            ShowPopup();
            return;
        }

        newCashFlow.Amount = (int)tempAmount;

        await AddNewCashFlow();
    }

    private async Task AddNewCashFlow()
    {
        try
        {
            await cashFlowService.SaveCashFlowAsync(newCashFlow);

            // Reset form
            newCashFlow = new ADCourseWork.Models.CashFlow
                {
                    FlowDate = DateTime.Today
                };
            tempAmount = 0;

            navigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding the cash flow: {ex.Message}";
            ShowPopup();
        }
    }

    private void ShowPopup()
    {
        showErrorPopup = true;
    }

    private void ClosePopup()
    {
        showErrorPopup = false;
    }

    private void ResetValidation()
    {
        errorMessage = null;
        showErrorPopup = false;
    }

    // Financial tracking
    private int currentBalance;

    protected override async Task OnInitializedAsync()
    {
        newCashFlow.FlowDate = DateTime.Today;
        await LoadFinancialData();
    }

    private async Task LoadFinancialData()
    {
        try
        {
            var allCashFlows = await cashFlowService.LoadCashFlowAsync();
            int totalInflow = allCashFlows.Where(cf => cf.TransactionType == "income").Sum(cf => cf.Amount);
            int totalExpense = allCashFlows.Where(cf => cf.TransactionType == "expense").Sum(cf => cf.Amount);

            currentBalance = totalInflow - totalExpense;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading financial data. Please refresh the page.";
            Console.WriteLine(ex.Message);
        }
    }
}
