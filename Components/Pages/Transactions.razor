@page "/transactions"
@using ADCourseWork.Models
@using ADCourseWork.Services
@inject ICashflows cashFlowService

<h3 class="text-center mt-4">Transactions</h3>
<div class="container mt-5">
    <div class="card shadow p-4">
        <!-- Search Section -->
        <div class="mb-4">
            <div class="row">
                <!-- Search -->
                <div class="col-md-12">
                    <label for="searchTerm" class="form-label">Search by Name or Note</label>
                    <input type="text" id="searchTerm" class="form-control" placeholder="Search by name or note" @bind="searchTerm">
                </div>
            </div>
            <!-- Search Button -->
            <div class="row mt-3">
                <div class="col-md-12 d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="ApplySearchFilter">Search</button>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="mb-4">
            <div class="row">
                <!-- Filter by Type -->
                <div class="col-md-3">
                    <label for="filterType" class="form-label">Filter by Type</label>
                    <select id="filterType" class="form-select" @bind="filterType">
                        <option value="">All</option>
                        <option value="income">Income</option>
                        <option value="expense">Expense</option>
                    </select>
                </div>
                <!-- Filter by Tag -->
                <div class="col-md-3">
                    <label for="filterTag" class="form-label">Filter by Tag</label>
                    <select id="filterTag" class="form-select" @bind="filterTag">
                        <option value="">All</option>
                        <option value="food">Food</option>
                        <option value="transport">Transport</option>
                        <option value="shopping">Shopping</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <!-- Filter by Date Range -->
                <div class="col-md-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" id="startDate" class="form-control" @bind="startDate">
                </div>
                <div class="col-md-3">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" id="endDate" class="form-control" @bind="endDate">
                </div>
            </div>
            <div class="row mt-3">
                <!-- Sort by Date -->
                <div class="col-md-3">
                    <label for="sortOrder" class="form-label">Sort by Date</label>
                    <select id="sortOrder" class="form-select" @bind="sortOrder">
                        <option value="desc">Newest First</option>
                        <option value="asc">Oldest First</option>
                    </select>
                </div>
            </div>
            <!-- Apply Filters Button -->
            <div class="row mt-3">
                <div class="col-md-12 d-flex justify-content-end">
                    <button class="btn btn-primary" @onclick="ApplyOtherFilters">Apply Filters</button>
                </div>
            </div>
        </div>

        <!-- Transactions Table -->
        <div class="table-responsive">
            @if (filteredTransactions?.Any() ?? false)
            {
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Transaction Name</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Tag</th>
                            <th>Note</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@(string.IsNullOrEmpty(transaction.TransactionName) ? "N/A" : transaction.TransactionName)</td>
                                <td>@(string.IsNullOrEmpty(transaction.TransactionType) ? "N/A" : transaction.TransactionType)</td>
                                <td>@transaction.FlowDate.ToShortDateString()</td>
                                <td>Rs. @(transaction.Amount)</td>
                                <td>@(string.IsNullOrWhiteSpace(transaction.CustomTag) ? transaction.TransactionTag : transaction.CustomTag)</td>
                                <td>@(string.IsNullOrEmpty(transaction.Note) ? "N/A" : transaction.Note)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-warning text-center">
                    No transactions available.
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ADCourseWork.Models.CashFlow> transactions = new();
    private List<ADCourseWork.Models.CashFlow> filteredTransactions = new();

    private string filterType = "";
    private string filterTag = "";
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private string searchTerm = "";
    private string sortOrder = "desc";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all transactions
            transactions = await cashFlowService.LoadCashFlowAsync();
            ApplyOtherFilters(); // Apply the filters and sorting as default
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void ApplySearchFilter()
    {
        filteredTransactions = transactions;

        // Search by Name or Note, ensuring that neither are null before calling Contains
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredTransactions = filteredTransactions.Where(t =>
                (t.TransactionName != null && t.TransactionName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Note != null && t.Note.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))).ToList();
        }
    }

    private void ApplyOtherFilters()
    {
        filteredTransactions = transactions;

        // Filter by Type
        if (!string.IsNullOrEmpty(filterType))
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionType == filterType).ToList();
        }

        // Filter by Tag
        if (!string.IsNullOrEmpty(filterTag))
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionTag == filterTag || t.CustomTag == filterTag).ToList();
        }

        // Filter by Date Range
        if (startDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.FlowDate >= startDate.Value).ToList();
        }
        if (endDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.FlowDate <= endDate.Value).ToList();
        }

        // Sort by Date
        if (sortOrder == "desc")
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.FlowDate).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.FlowDate).ToList();
        }
    }
}
